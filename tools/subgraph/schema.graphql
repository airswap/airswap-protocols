type User @entity {
  id: ID! # wallet address
  authorizedSigners: [User!]! # signers this user has authorized
  authorizedSenders: [User!]! # senders this user has authorized
  cancelledSwapNonces: [BigInt!]!
  cancelledSwapLightNonces: [BigInt!]!
  amountInLocker: BigInt
}

type SwapContract @entity {
  id: ID! # address of the swap contract
}

type SwapLightContract @entity {
  id: ID! # address of the swap contract
}

type Swap @entity {
  id: ID! # signer address + nonce

  swap: SwapContract! # address of swap contract that executed this order
  block: BigInt # The block this swap was executed at
  transactionHash: Bytes # The transaction hash the swap was executed at
  timestamp: BigInt # The timestamp the hash was executed at
  from: Bytes # address of the originator of the transaction
  to: Bytes # who the originator sent the transaction to
  value: BigInt # value sent with the transaction

  nonce: BigInt # order nonce for a user
  expiry: BigInt

  signer: User
  signerAmount: BigInt
  signerId: BigInt
  signerToken: Token

  sender: User
  senderAmount: BigInt
  senderId: BigInt
  senderToken: Token

  affiliate: User
  affiliateAmount: BigInt
  affiliateId: BigInt
  affiliateToken: Token
}

type SwapLight @entity {
  id: ID! # signer address + nonce

  swap: SwapLightContract! # address of swap contract that executed this order
  block: BigInt # The block this swap was executed at
  transactionHash: Bytes # The transaction hash the swap was executed at
  timestamp: BigInt # The timestamp the hash was executed at
  from: Bytes # address of the originator of the transaction
  to: Bytes # who the originator sent the transaction to
  value: BigInt # value sent with the transaction

  nonce: BigInt # order nonce for a user
  expiry: BigInt

  signer: User
  signerAmount: BigInt
  signerToken: Token
  protocolFee: BigInt

  sender: User
  senderAmount: BigInt
  senderToken: Token
}

type Token @entity {
  id: ID! # token address
  isBlacklisted: Boolean
}

type Indexer @entity {
  id: ID! # indexer address
}

type Index @entity {
  id: ID! # index address
  indexer: Indexer! # the indexer that created the index
  signerToken: Token!
  senderToken: Token!
  protocol: Bytes!
}

type Stake @entity {
  id: ID! # staker + indexer
  indexer: Indexer! # the indexer that emitted
  staker: User! # user address of user that staked
  signerToken: Token!
  senderToken: Token!
  protocol: Bytes!
  stakeAmount: BigInt!
}

type Locator @entity {
  id: ID! # owner + index
  owner: User! # the owner of the locator
  index: Index!
  score: BigInt!
  locator: Bytes!
}

type DelegateFactory @entity {
  id: ID! # address of the delegate factory
}

type Delegate @entity {
  id: ID! # delegate contract address
  factory: DelegateFactory! #factory that created this delegate
  swap: SwapContract!
  indexer: Indexer!
  owner: User!
  tradeWallet: Bytes!
}

type Rule @entity {
  id: ID! # delegate address + signerToken + senderToken
  delegate: Delegate!
  owner: User!
  signerToken: Token!
  senderToken: Token!
  maxSenderAmount: BigInt!
  priceCoef: BigInt!
  priceExp: BigInt!
}

type Locker @entity {
  id: ID! # address of the locker
  throttlingPercentage: BigInt
  throttlingDuration: BigInt
  throttlingBalance: BigInt
}

type Pool @entity {
  id: ID! # address of the pool
  scale: BigInt
  max: BigInt
  roots: [Bytes!]!
}

type PoolClaim @entity {
  id: ID! # claim address + token + timestamp
  pool: Pool!
  transactionHash: Bytes! # The transaction hash the swap was executed at
  user: User!
  token: Token!
  amount: BigInt!
}

type EnabledRoot @entity {
  id: ID! #Pool + root
  pool: Pool!
  root: Bytes!
}

type CollectedFeesDay @entity {
  id: ID!
  date: Int!
  amount: BigDecimal!
}
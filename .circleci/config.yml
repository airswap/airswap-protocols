version: 2.1

orbs:
  airswap: airswap/assume-role@volatile
  aws-cli: airswap/aws-cli@volatile
  slack: circleci/slack@0.1.1
  datadog: airswap/datadog@volatile

references:
  container_config: &container_config
    docker:
      - image: circleci/node:10
    working_directory: ~/repo

  run_tests: &run_tests
    <<: *container_config
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: yarn install and dependencies
          command: |
            yarn install
      - run: 
          name: Check Dependencies
          command: |
            sudo apt install python3-pip
            pip3 install -r requirements.txt
            python3 scripts/dependency_checker.py
      - run:
          name: Eslint
          command: yarn lint
      - run:
          name: Solhint
          command: yarn hint
      - run:
          name: Run Tests
          command: |
            yarn ganache > /dev/null &
            yarn test
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/repo
          paths: .

jobs:
  run_tests:
    <<: *run_tests

  deploy:
    <<: *container_config
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install NPM non-interactive
          command: sudo npm install -g npm-login-noninteractive
      - run:
          name: Set up the npm user
          command: npm-login-noninteractive
      - run:
          name: NPM publish utils
          command: |
            cd utils
            ### ADD FOLDERS HERE TO PROCESS ###
            for file in order-utils test-utils
            do
              cd $file
              NPM_NAME=$(node -p "require('./package.json').name")
              NPM_VERSION=$(npm view $NPM_NAME version || :)
              LOCAL_VERSION=$(node -p "require('./package.json').version")
              if [[ $LOCAL_VERSION != $NPM_VERSION ]]; then
                echo "Publishing to NPM..." # this is where we deploy the code to npm
                npm publish
                npm access public $NPM_NAME
              fi
              cd ..
            done
      - run:
          name: NPM publish source
          command: |
            cd source
            ### ADD FOLDERS HERE TO PROCESS ###
            for file in indexer index delegate delegate-factory swap types tokens wrapper
            do
              cd $file
              NPM_NAME=$(node -p "require('./package.json').name")
              NPM_VERSION=$(npm view $NPM_NAME version || :)
              LOCAL_VERSION=$(node -p "require('./package.json').version")
              if [[ $LOCAL_VERSION != $NPM_VERSION ]]; then
                echo "Generating build..."
                yarn compile
                echo "Publishing to NPM..." # this is where we deploy the code to npm
                npm publish
                npm access public $NPM_NAME
              fi
              cd ..
            done
      # Now we need to iterate over folders and deploy the folders that are listed
      # but only if the version changed
      - slack/status

workflows:
  smart_contract:
    jobs:
      - run_tests:
          context: Development
      - deploy:
          context: NPM_Publish
          requires:
            - run_tests
          filters:
            branches:
              only:
                - master
